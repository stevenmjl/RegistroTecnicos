@page "/Sistema/Delete/{idSistema:int}"
@rendermode InteractiveServer
@inject SistemasService sistemaService
@inject NavigationManager navigation

<PageTitle>Eliminar sistema</PageTitle>

<Toasts class="p-3" Messages="Mensajes" Placement="ToastsPlacement.TopRight"
        AutoHide="true" Delay="5000" />

<div class="container">
    <div class="card shadow-lg">
        @* Título *@
        <div class="card-header text-white text-center">
            <div class="bg-danger rounded">
                <h1>Eliminar sistema</h1>
            </div>
        </div>

        @* Cuerpo de página *@
        <div class="card-body">
            <Card Color="CardColor.Danger" Class="mb-2" Style="width:24rem;">
                <CardHeader>
                    <CardTitle>
                        ID: @Sistema.SistemaId
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <CardText>@Sistema.Descripcion</CardText>
                </CardBody>
            </Card>
        </div>

        @* Botones de control *@
        <div class="card-footer d-flex justify-content-center">
            <button class="btn btn-danger bi bi-trash" type="button"
                    @onclick="Eliminar">
                Eliminar
            </button>
            <button class="btn btn-secondary" type="button"
                    @onclick="Volver">
                <i class="bi bi-arrow-left"></i> Volver
            </button>
        </div>
    </div>
</div>

@code {
    public Sistemas? Sistema { get; set; } = new Sistemas();
    [Parameter]
    public int idSistema { get; set; }
    List<ToastMessage> Mensajes = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        Sistema = await sistemaService.Buscar(idSistema);

        if (Sistema == null)
        {
            navigation.NavigateTo("/Sistema/Index");
        }
    }

    public async Task Eliminar()
    {
        try
        {
            var eliminado = await sistemaService.Eliminar(idSistema);

            if (eliminado)
            {
                MostrarMensaje(ToastType.Danger, "Sistema eliminado correctamente.");
            }
            else
            {
                MostrarMensaje(ToastType.Warning, "No se pudo eliminar el sistema. Verifique si está asociado a otros registros.");
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("not found", StringComparison.OrdinalIgnoreCase))
            {
                MostrarMensaje(ToastType.Warning, "El sistema no existe o ya fue eliminado.");
            }
            else if (ex.Message.Contains("database", StringComparison.OrdinalIgnoreCase))
            {
                MostrarMensaje(ToastType.Danger, "Error en la base de datos. Por favor, intente más tarde.");
            }
            else
            {
                MostrarMensaje(ToastType.Danger, $"Error inesperado: {ex.Message}");
            }
        }
    }

    private void MostrarMensaje(ToastType toastType, string message)
    {
        Mensajes.Add(CrearMensaje(toastType, message));
    }

    private ToastMessage CrearMensaje(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = message,
        };

    public void Volver() => navigation.NavigateTo("/Sistema/Index");
}