@page "/Ticket/Create"
@rendermode InteractiveServer
@inject TicketsService ticketsService
@inject ClientesService clientesService
@inject TecnicosService tecnicosService

<PageTitle>Registrar Ticket</PageTitle>

<EditForm Model="Ticket" OnValidSubmit="Guardar">
    <Toasts class="p-3" Messages="Mensajes" Placement="ToastsPlacement.TopRight"
            AutoHide="true" Delay="5000" />
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            @* Título *@
            <div class="card-header text-white text-center">
                <div class="bg-success rounded">
                    <h1>Registro de Ticket</h1>
                </div>
            </div>

            @* Cuerpo de página *@
            <div class="card-body">
                @* ID *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="TicketId">ID:</label>
                    <InputNumber id="TicketId" class="form-control text-left" readonly
                                 @bind-Value="UltimoTicket"></InputNumber>
                </div>

                @* Asunto *@
                <div class="mb-3 col-6">
                    <label class="form-label" for="Asunto">Asunto:</label>
                    <InputText id="Asunto" class="form-control"
                               @bind-Value="Ticket.Asunto" placeholder="Ej: Problema de red">
                    </InputText>
                    <ValidationMessage For="@(() => Ticket.Asunto)"></ValidationMessage>
                </div>

                @* Descripción *@
                <div class="mb-3">
                    <label class="form-label" for="Descripcion">Descripción:</label>
                    <InputTextArea id="Descripcion" class="form-control"
                                   @bind-Value="Ticket.Descripcion" 
                                   placeholder="Describa el problema en detalle"
                                   rows="3"></InputTextArea>
                    <ValidationMessage For="@(() => Ticket.Descripcion)"></ValidationMessage>
                </div>

                @* Fecha *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="Fecha">Fecha:</label>
                    <input id="Fecha" class="form-control" type="text" 
                           value="@Ticket.Fecha.ToString("dd/MM/yyyy")" readonly />
                    <ValidationMessage For="@(() => Ticket.Fecha)"></ValidationMessage>
                </div>

                @* Prioridad *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="Prioridad">Prioridad (1-5):</label>
                    <InputNumber id="Prioridad" class="form-control"
                                 @bind-Value="Ticket.Prioridad"></InputNumber>
                    <ValidationMessage For="@(() => Ticket.Prioridad)"></ValidationMessage>
                </div>

                @* Tiempo Invertido *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="TiempoInvertido">Tiempo (horas):</label>
                    <InputNumber id="TiempoInvertido" class="form-control"
                                 @bind-Value="Ticket.TiempoInvertido"></InputNumber>
                    <ValidationMessage For="@(() => Ticket.TiempoInvertido)"></ValidationMessage>
                </div>

                @* Cliente *@
                <div class="mb-3 col-6">
                    <label class="form-label" for="ClienteId">Cliente:</label>
                    <InputSelect id="ClienteId" class="form-control" @bind-Value="Ticket.ClienteId">
                        <option value="">Seleccione un cliente:</option>
                        @foreach (var cliente in Clientes)
                        {
                            <option value="@cliente.ClienteId">@cliente.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Ticket.ClienteId)"></ValidationMessage>
                </div>

                @* Técnico *@
                <div class="mb-3 col-6">
                    <label class="form-label" for="TecnicoId">Técnico:</label>
                    <InputSelect id="TecnicoId" class="form-control" @bind-Value="Ticket.TecnicoId">
                        <option value="">Seleccione un técnico:</option>
                        @foreach (var tecnico in Tecnicos)
                        {
                            <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Ticket.TecnicoId)"></ValidationMessage>
                </div>
            </div>

            @* Botones de control *@
            <div class="card-footer d-flex justify-content-center gap-3">
                <button type="submit" class="btn btn-success bi bi-floppy">Crear</button>
                <a class="btn btn-secondary" href="/Ticket/Index">
                    <i class="bi bi-arrow-left"></i> Volver
                </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Tickets? Ticket { get; set; } = new Tickets();
    private int UltimoTicket;
    private List<Clientes> Clientes = new List<Clientes>();
    private List<Tecnicos> Tecnicos = new List<Tecnicos>();
    List<ToastMessage> Mensajes = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        UltimoTicket = 1 + await ticketsService.UltimoId();
        Clientes = await clientesService.Listar(c => true);
        Tecnicos = await tecnicosService.Listar(t => true);
        Ticket.Fecha = DateTime.Now; // Establecer fecha actual
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            var nuevo = await ticketsService.Guardar(Ticket);
            if (nuevo)
            {
                MostrarMensaje(ToastType.Success,
                    $"Ticket #{Ticket.TicketId} ha sido creado correctamente.");
                Ticket = new Tickets();
                UltimoTicket = 1 + await ticketsService.UltimoId();
                Ticket.Fecha = DateTime.Now; // Resetear fecha al crear nuevo
            }
            else
            {
                MostrarMensaje(ToastType.Danger, "Error al crear el ticket.");
            }
        }
        else
        {
            MostrarMensaje(ToastType.Warning,
                "Ya existe un ticket con el mismo asunto o descripción.");
        }
    }

    public async Task<bool> Validar()
    {
        return await ticketsService.Existe(Ticket.TicketId, Ticket.Asunto);
    }

    private void MostrarMensaje(ToastType toastType, string message)
    {
        Mensajes.Add(new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = DateTime.Now.ToString("g"),
            Message = message
        });
    }
}