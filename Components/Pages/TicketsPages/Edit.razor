@page "/Ticket/Edit/{idTicket:int}"
@rendermode InteractiveServer
@inject TicketsService ticketsService
@inject ClientesService clientesService
@inject TecnicosService tecnicosService
@inject NavigationManager navigation

<PageTitle>Editar Ticket</PageTitle>

<EditForm Model="Ticket" OnValidSubmit="Editar">
    <Toasts class="p-3" Messages="Mensajes" Placement="ToastsPlacement.TopRight"
            AutoHide="true" Delay="5000" />
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            @* Título *@
            <div class="card-header text-white text-center">
                <div class="bg-warning rounded">
                    <h1>Editar Ticket</h1>
                </div>
            </div>

            @* Cuerpo de página *@
            <div class="card-body">
                @* ID *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="TicketId">ID:</label>
                    <InputNumber id="TicketId" class="form-control text-left" readonly
                                 @bind-Value="Ticket.TicketId"></InputNumber>
                </div>

                @* Asunto *@
                <div class="mb-3">
                    <label class="form-label" for="Asunto">Asunto:</label>
                    <InputText id="Asunto" class="form-control"
                               @bind-Value="Ticket.Asunto" placeholder="Ej: Problema de red"></InputText>
                    <ValidationMessage For="@(() => Ticket.Asunto)"></ValidationMessage>
                </div>

                @* Descripción *@
                <div class="mb-3">
                    <label class="form-label" for="Descripcion">Descripción:</label>
                    <InputTextArea id="Descripcion" class="form-control"
                                   @bind-Value="Ticket.Descripcion" 
                                   placeholder="Describa el problema en detalle"
                                   rows="3"></InputTextArea>
                    <ValidationMessage For="@(() => Ticket.Descripcion)"></ValidationMessage>
                </div>

                @* Fecha *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="Fecha">Fecha:</label>
                    <input id="Fecha" class="form-control" type="text" 
                           value="@Ticket.Fecha.ToString("dd/MM/yyyy")" readonly />
                    <ValidationMessage For="@(() => Ticket.Fecha)"></ValidationMessage>
                </div>

                @* Prioridad *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="Prioridad">Prioridad:</label>
                    <InputNumber id="Prioridad" class="form-control"
                                 @bind-Value="Ticket.Prioridad"></InputNumber>
                    <ValidationMessage For="@(() => Ticket.Prioridad)"></ValidationMessage>
                </div>

                @* Tiempo invertido *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="TiempoInvertido">Tiempo invertido (horas):</label>
                    <InputNumber id="TiempoInvertido" class="form-control"
                                 @bind-Value="Ticket.TiempoInvertido" step="0.1" min="0.1" max="1000"></InputNumber>
                    <ValidationMessage For="@(() => Ticket.TiempoInvertido)"></ValidationMessage>
                </div>

                @* Cliente *@
                <div class="mb-3 col-6">
                    <label class="form-label" for="ClienteId">Cliente:</label>
                    <InputSelect id="ClienteId" class="form-control" @bind-Value="Ticket.ClienteId">
                        <option value="">Seleccione un cliente:</option>
                        @foreach (var cliente in Clientes)
                        {
                            <option value="@cliente.ClienteId">@cliente.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Ticket.ClienteId)"></ValidationMessage>
                </div>

                @* Técnico *@
                <div class="mb-3 col-6">
                    <label class="form-label" for="TecnicoId">Técnico:</label>
                    <InputSelect id="TecnicoId" class="form-control" @bind-Value="Ticket.TecnicoId">
                        <option value="">Seleccione un técnico:</option>
                        @foreach (var tecnico in Tecnicos)
                        {
                            <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Ticket.TecnicoId)"></ValidationMessage>
                </div>
            </div>

            @* Botones de control *@
            <div class="card-footer d-flex justify-content-center">
                <button class="btn btn-warning" type="submit">
                    <i class="bi bi-pencil-square"></i> Editar
                </button>
                <button class="btn btn-secondary" type="button" 
                        @onclick="Volver">
                    <i class="bi bi-arrow-left"></i> Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Tickets? Ticket { get; set; } = new Tickets();
    private List<Tecnicos> Tecnicos = new List<Tecnicos>();
    private List<Clientes> Clientes = new List<Clientes>();
    private List<ToastMessage> Mensajes = new List<ToastMessage>();
    [Parameter]
    public int idTicket { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Ticket = await ticketsService.Buscar(idTicket);

        if (Ticket == null)
        {
            navigation.NavigateTo("/Ticket/Index");
        }
        else
        {
            Tecnicos = await tecnicosService.Listar(t => true);
            Clientes = await clientesService.Listar(c => true);
        }
    }

    public async Task Editar()
    {
        if (!await Validar())
        {
            var editado = await ticketsService.Guardar(Ticket);
            if (editado)
            {
                MostrarMensaje(ToastType.Success,
                    $"Ticket {Ticket.TicketId} ha sido editado correctamente.");
            }
            else
            {
                MostrarMensaje(ToastType.Danger, "Ticket no se ha podido editar correctamente.");
            }
        }
        else
        {
            MostrarMensaje(ToastType.Warning,
                "Ya existe un ticket con el mismo asunto o cliente.");
        }
    }

    public async Task<bool> Validar()
    {
        var existe = await ticketsService.Existe(Ticket.TicketId, Ticket.Asunto);
        return existe;
    }

    private void MostrarMensaje(ToastType toastType, string message)
    {
        Mensajes.Add(CrearMensaje(toastType, message));
    }

    private ToastMessage CrearMensaje(ToastType toastType, string message) =>
        new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = message,
        };

    public void Volver() => navigation.NavigateTo("/Ticket/Index");
}