@page "/Tecnico/Edit/tecnicoid={idTecnico:int}"
@rendermode InteractiveServer
@inject TecnicosService tecnicosService
@inject NavigationManager navigation

<PageTitle>Editar t&eacute;cnico</PageTitle>

<EditForm Model="Tecnico" OnValidSubmit="Editar">
    <Toasts class="p-3" Messages="Mensajes" Placement="ToastsPlacement.TopRight"
            AutoHide="true" Delay="5000" />
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            @* Titulo de página *@
            <div class="card-header text-white text-center">
                <div class="bg-warning rounded">
                    <h1>Editar t&eacute;cnico</h1>
                </div>
            </div>

            @* Cuerpo de página *@
            <div class="card-body">
                @* Id *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="Id">ID</label>
                    <InputNumber id="Id" class="form-control text-left" readonly
                                 @bind-Value="Tecnico.TecnicoId"></InputNumber>
                </div>

                @* Nombres *@
                <div class="mb-3 col-4">
                    <label class="form-label" for="Nombres">Nombres</label>
                    <InputText id="Nombres" class="form-control"
                               @bind-Value="Tecnico.Nombres" placeholder="Ej: Angela Santana"></InputText>
                    <ValidationMessage For="@(() => Tecnico.Nombres)"></ValidationMessage>
                </div>

                @* Sueldo Hora *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="SueldoHora">Sueldo hora</label>
                    <InputNumber id="SueldoHora" class="form-control"
                                 @bind-Value="Tecnico.SueldoHora"></InputNumber>
                    <ValidationMessage For="@(() => Tecnico.SueldoHora)"></ValidationMessage>
                </div>
            </div>

            @* Botones de control *@
            <div class="card-footer d-flex justify-content-center">
                <button class="btn btn-warning bi bi-pencil-square">
                    Editar
                </button>
                <button class="btn btn-secondary" type="button"
                        @onclick="Volver">
                    <i class="bi bi-arrow-left"></i> Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Tecnicos? Tecnico { get; set; } = new Tecnicos();
    [Parameter]
    public int idTecnico { get; set; }
    List<ToastMessage> Mensajes = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        var tecnicoExistente = await tecnicosService.Buscar(idTecnico);
        if (tecnicoExistente != null)
        {
            // Desvincula la entidad si ya estaba rastreada
            tecnicosService.DesvincularLocal(tecnicoExistente.TecnicoId);
            Tecnico = tecnicoExistente;
        }else{
            navigation.NavigateTo("/Tecnico/Index");
        }
    }

    public async Task Editar()
    {
        if (!await Validar())
        {
            var editado = await tecnicosService.Guardar(Tecnico);
            if (editado)
            {
                MostrarMensaje(ToastType.Success,
                    $"Técnico {Tecnico.Nombres} ha sido editado correctamente."); ;
            }
            else
            {
                MostrarMensaje(ToastType.Danger, "Técnico no se ha podido editar correctamente.");
            }
        }
        else
        {
            MostrarMensaje(ToastType.Warning, "Ya existe un técnico con este nombre.");
        }
    }

    public async Task<bool> Validar()
    {
        var existe = await tecnicosService.Existe(Tecnico.TecnicoId, Tecnico.Nombres);
        return existe;
    }

    private void MostrarMensaje(ToastType toastType, string message)
    {
        Mensajes.Add(CrearMensaje(toastType, message));
    }

    private ToastMessage CrearMensaje(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = message,
        };

    public void Volver() => navigation.NavigateTo("/Tecnico/Index");
}