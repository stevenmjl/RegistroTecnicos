@page "/Ciudad/Create"
@rendermode InteractiveServer
@inject CiudadesService ciudadService

<PageTitle>Crear ciudad</PageTitle>

<EditForm Model="Ciudad" OnValidSubmit="Guardar">
    <Toasts class="p-3" Messages="Mensajes" Placement="ToastsPlacement.TopRight"
            AutoHide="true" Delay="5000" />
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            @* Título *@
            <div class="card-header text-white text-center">
                <div class="bg-success rounded">
                    <h1>Registro de ciudades</h1>
                </div>
            </div>

            @* Cuerpo de página *@
            <div class="card-body">
                @* Id *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="Id">Id</label>
                    <InputNumber id="Id" class="form-control text-left"
                                 readonly @bind-Value="UltimaCiudad"></InputNumber>
                </div>

                @* Nombre *@
                <div class="mb-3 col-6">
                    <label class="form-label" for="Nombres">Nombre</label>
                    <InputText id="Nombre" class="form-control"
                               @bind-Value="Ciudad.NombreCiudad" placeholder="Ej: Salcedo">
                    </InputText>
                    <ValidationMessage For="@(() => Ciudad.NombreCiudad)"></ValidationMessage>
                </div>
            </div>

            @* Botones de control *@
            <div class="card-footer d-flex justify-content-center">
                <button type="submit" class="bi bi-floppy btn btn-success">Crear</button>

                <a class="btn btn-secondary" href="/Ciudad/Index">
                    <i class="bi bi-arrow-left"></i> Volver
                </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Ciudades? Ciudad { get; set; } = new Ciudades();
    private int UltimaCiudad;
    List<ToastMessage> Mensajes = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        UltimaCiudad = 1 + await ciudadService.UltimoId();
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            var nuevo = await ciudadService.Guardar(Ciudad);
            if (nuevo)
            {
                MostrarMensaje(ToastType.Success,
                    $"Ciudad {Ciudad.NombreCiudad} ha sido creada correctamente.");
                Ciudad = new Ciudades();
                UltimaCiudad = 1 + await ciudadService.UltimoId();
            }
            else
            {
                MostrarMensaje(ToastType.Danger, "Ciudad no se ha podido crear correctamente.");
            }
        }
        else
        {
            MostrarMensaje(ToastType.Warning, "Ya existe una ciudad con este nombre.");
        }
    }

    public async Task<bool> Validar()
    {
        var existe = await ciudadService.Existe(Ciudad.CiudadId, Ciudad.NombreCiudad);
        return existe;
    }

    private void MostrarMensaje(ToastType toastType, string message)
    {
        Mensajes.Add(CrearMensaje(toastType, message));
    }

    private ToastMessage CrearMensaje(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = message,
        };
}