@page "/Cliente/Create"
@rendermode InteractiveServer
@inject ClientesService clientesService
@inject TecnicosService tecnicosService
@inject NavigationManager navigation

<PageTitle>Registrar Cliente</PageTitle>

<EditForm Model="Cliente" OnValidSubmit="Guardar">
    <Toasts class="p-3" Messages="Mensajes" Placement="ToastsPlacement.TopRight"
            AutoHide="true" Delay="5000" />
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            @* Título *@
            <div class="card-header text-white text-center">
                <div class="bg-success rounded">
                    <h1>Registro de Cliente</h1>
                </div>
            </div>

            @* Cuerpo de página *@
            <div class="card-body">
                @* ID *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="ClienteId">ID:</label>
                    <InputNumber id="ClienteId" class="form-control text-left" readonly
                                 @bind-Value="UltimoCliente"></InputNumber>
                </div>

                @* Nombres *@
                <div class="mb-3 col-4">
                    <label class="form-label" for="Nombres">Nombres:</label>
                    <InputText id="Nombres" class="form-control"
                               @bind-Value="Cliente.Nombres" placeholder="Ej: Carla Pérez">
                    </InputText>
                    <ValidationMessage For="@(() => Cliente.Nombres)"></ValidationMessage>
                </div>

                @* RNC *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="Rnc">RNC:</label>
                    <InputText id="Rnc" class="form-control"
                               @bind-Value="Cliente.Rnc" placeholder="Ej: 123456789">
                    </InputText>
                    <ValidationMessage For="@(() => Cliente.Rnc)"></ValidationMessage>
                </div>

                @* Fecha Ingreso *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="FechaIngreso">Fecha de ingreso:</label>
                    <input id="FechaIngreso" class="form-control" type="text" 
                           value="@Cliente.FechaIngreso.ToString("dd/MM/yyyy")" readonly />
                    <ValidationMessage For="@(() => Cliente.FechaIngreso)"></ValidationMessage>
                </div>

                @* Dirección *@
                <div class="mb-3">
                    <label class="form-label" for="Direccion">Dirección:</label>
                    <InputText id="Direccion" class="form-control"
                               @bind-Value="Cliente.Direccion" placeholder="Ej: Calle 123, Santo Domingo">
                    </InputText>
                    <ValidationMessage For="@(() => Cliente.Direccion)"></ValidationMessage>
                </div>

                @* Limite de Crédito *@
                <div class="mb-3 col-2">
                    <label class="form-label" for="LimiteCredito">Límite Crédito:</label>
                    <InputNumber id="LimiteCredito" class="form-control"
                                 @bind-Value="Cliente.LimiteCredito"></InputNumber>
                    <ValidationMessage For="@(() => Cliente.LimiteCredito)"></ValidationMessage>
                </div>

                @* Técnico Encargado *@
                <div class="mb-3 col-4">
                    <label class="form-label" for="TecnicoId">Técnico encargado:</label>
                    <InputSelect id="TecnicoId" class="form-control" @bind-Value="Cliente.TecnicoId">
                        <option value="">Seleccione un t&eacute;cnico:</option>
                        @foreach (var tecnico in Tecnicos)
                        {
                                <option value="@tecnico.TecnicoId">@tecnico.Nombres</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Cliente.TecnicoId)"></ValidationMessage>
                </div>
            </div>

            @* Botones de control *@
            <div class="card-footer d-flex justify-content-center">
                <button class="btn btn-success" type="submit">
                        <i class="bi bi-floppy"></i> Crear
                </button>
                <button class="btn btn-secondary" type="button" 
                         @onclick="Volver">
                         <i class="bi bi-arrow-left"></i> Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Clientes? Cliente { get; set; } = new Clientes();
    private int UltimoCliente;
    private List<Tecnicos> Tecnicos = new List<Tecnicos>();
    List<ToastMessage> Mensajes = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        UltimoCliente = 1 + await clientesService.UltimoId();
        Tecnicos = await tecnicosService.Listar(t => true); // Obteniendo todos los técnicos
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            var nuevo = await clientesService.Guardar(Cliente);
            if (nuevo)
            {
                MostrarMensaje(ToastType.Success,
                    $"Cliente {Cliente.Nombres} ha sido creado correctamente.");
                Cliente = new Clientes();
                UltimoCliente = 1 + await clientesService.UltimoId();
            }
            else
            {
                MostrarMensaje(ToastType.Danger, "Cliente no se ha podido crear correctamente.");
            }
        }
        else
        {
            MostrarMensaje(ToastType.Warning, "Ya existe un cliente con este nombre.");
        }
    }

    public async Task<bool> Validar()
    {
        var existe = await clientesService.Existe(Cliente.ClienteId, Cliente.Nombres);
        return existe;
    }

    private void MostrarMensaje(ToastType toastType, string message)
    {
        Mensajes.Add(CrearMensaje(toastType, message));
    }

    private ToastMessage CrearMensaje(ToastType toastType, string message)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = message,
        };

    public void Volver() => navigation.NavigateTo("/Cliente/Index");
}